package com.cluster.grammar;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.cluster.grammarloader.GrammarLoader;
import com.owl.trees.ITreeNode;

public class LR1Item {
	
	private Grammar _grammar;
	private int _productionIndex;
	private int _dotIndex;
	private String _lookaheadValue;
	private String _symbolAfterDot;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		GrammarLoader loader = null;
		try {
			loader = new GrammarLoader();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Grammar grammar = loader.getGrammar();
		
		LR1Item item = new LR1Item(loader.getGrammar(), 0, 1, "FSLASH");
		LR1Item item1 = new LR1Item(grammar, 0, 0, "PLUS");
		LR1Item item2 = new LR1Item(grammar, 0, 0, "INT");
		
		System.out.println(item.equals(item1));
		System.out.println(item.equals(item2));
		
		System.out.println(item);
		System.out.println(item.shiftCore());
		System.out.println(item.shiftCore().shiftCore());
		//System.out.println(item.shiftCore().shiftCore().shiftCore());
		
		System.out.println(item.getItemExpansions());
		
		LR1ItemSet itemSet = new LR1ItemSet();
		itemSet.addItem(item);
		System.out.println(itemSet.getSize());
		itemSet.getAnItem();
		System.out.println(itemSet.getSize());
		itemSet.getAnItem();
		System.out.println(itemSet.getSize());
		
		itemSet.addItem(item);
		
		LR1ItemSet itemSet1 = new LR1ItemSet();
		itemSet1.addItem(item);
		itemSet1.addItem(item1);
		
		System.out.println(itemSet1.isASuperSetOf(itemSet));
		
		itemSet.addItem(item2);
		
		System.out.println(itemSet1.isASuperSetOf(itemSet));
		
		itemSet.removeItem(item2);
		itemSet.computeClosure();
		System.out.println(itemSet);
	}
	
	public LR1Item(Grammar grammar, int productionIndex, int dotIndex, String lookahead){
		this._grammar = grammar;
		this._productionIndex = productionIndex;
		this._dotIndex = dotIndex;
		this._lookaheadValue = lookahead;
		this._symbolAfterDot = determineSymbolAfterDot();
	}
	
	private String determineSymbolAfterDot() {
		// TODO Auto-generated method stub
		String symbol = null;
		List<ITreeNode> rhsSymbols = 
				this._grammar.getAllRightHandSymbolsOfProduction(_productionIndex);
		if(!isDotAtEnd()){
			symbol = rhsSymbols.get(_dotIndex).GetValue();
		}
		
		return symbol;
	}
	
	/**
	 * A new LR1Item which gets generated by shifting the dot
	 * one position to the right
	 * @return
	 */
	public LR1Item shiftCore(){
		LR1Item result = null;
		
		if(isDotAtEnd()){
			// no shift can occur
			return result;
		}
		
		result = new LR1Item(_grammar, _productionIndex, _dotIndex+1, _lookaheadValue);
		return result;
	}
	
	public Set<LR1Item> getItemExpansions(){
		Set<LR1Item> resultSet = new HashSet<LR1Item>();
		if(this.isDotAtEnd()){
			return resultSet;
		}
		String symbol = getSymbolAfterDot();
		if(this._grammar.isTerminal(symbol)){
			return resultSet;
		}
		
		//If code comes here, symbol is nonterminal
		List<Integer> productionIndices = 
				this._grammar.getAllProductionsStartingWith(symbol);
		
		/******************
		 * For any item (A -> a.XB, z), we are calculating
		 * the sequence represented by Bz
		 * *******************/
		List<String> sequenceOfSymbols = new ArrayList<String>();
		List<ITreeNode> rhsSymbols = 
				this._grammar.getAllRightHandSymbolsOfProduction(_productionIndex);
		for(int i=this._dotIndex+1;i<rhsSymbols.size();i++){
			sequenceOfSymbols.add(rhsSymbols.get(i).GetValue());
		}
		sequenceOfSymbols.add(_lookaheadValue);
		/********************/
		
		Set<String> firstOfSequence = this._grammar.getFirstSet(sequenceOfSymbols);
		
		for(Integer productionIndex: productionIndices){
			for(String lookahead: firstOfSequence){
				// create an item
				LR1Item expandedItem = 
						new LR1Item(this._grammar, productionIndex, 0, lookahead);
				resultSet.add(expandedItem);
			}
		}
		
		return resultSet;
	}

	public boolean isDotAtEnd(){
		int noOfRightHandSymbols = 
				this._grammar.
				getAllRightHandSymbolsOfProduction(_productionIndex).size();
		if(this._dotIndex>=noOfRightHandSymbols){
			return true;
		}
		
		return false;
	}
	
	public String getSymbolAfterDot(){
		return this._symbolAfterDot;
	}
	
	public Grammar getGrammar(){
		return this._grammar;
	}
	
	public int getProductionIndex(){
		return this._productionIndex;
	}
	
	public int getDotIndex(){
		return this._dotIndex;
	}
	
	public String getLookaheadValue(){
		return this._lookaheadValue;
	}
	
	@Override
	public boolean equals(Object o){
		if(!(o instanceof LR1Item)){
			return false;
		}
		
		LR1Item lr1Item = (LR1Item) o;
		if(this._productionIndex == lr1Item._productionIndex &&
				this._dotIndex == lr1Item._dotIndex &&
				this._lookaheadValue.equals(lr1Item._lookaheadValue)){
			return true;
		}
		
		return false;
	}
	
	@Override
	public int hashCode(){
		return this._productionIndex+this._dotIndex+this._lookaheadValue.hashCode();
	}
	
	@Override
	public String toString(){
		ITreeNode startingNonTerminal = 
				this._grammar.getNonTerminalStartingProduction(this._productionIndex);
		List<ITreeNode> rhsSymbols = 
				this._grammar.getAllRightHandSymbolsOfProduction(_productionIndex);
		String itemStringRepresentation = startingNonTerminal.GetValue()+"->";
		for(int i=0;i<rhsSymbols.size();i++){
			if(i==this._dotIndex){
				itemStringRepresentation+=".";
			}
			itemStringRepresentation+=rhsSymbols.get(i).GetValue()+" ";
		}
		if(isDotAtEnd()){
			itemStringRepresentation+=".";
		}
		itemStringRepresentation = "{"+itemStringRepresentation
				+", "+this._lookaheadValue+"}";
		
		return itemStringRepresentation;
	}

}
