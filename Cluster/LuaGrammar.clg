#{
SCOLON := ;
EQUALS := =
COMMA := ,
DOT := #.
COLON := :
LRECTPAREN := #[
RRECTPAREN := #]
LPAREN := #(
RPAREN := #)
TRIPLEDOTS := #.#.#.
LBRACE := {
RBRACE := }
PLUS := #+
MINUS := #-
MULT := #*
DIV := /
POW := ^
MODULUS := %
DOUBLEDOTS := #.#.
LESSTHAN := <
LESSTHANOREQUALTO := <=
GREATERTHAN := >
GREATERTHANOREQUALTO := >=
DOUBLEEQUALS := ==
NOTEQUALS := ~=
BANG := ##
AND := a.n.d
OR := o.r
NOT := n.o.t
NIL := n.i.l
FALSE := f.a.l.s.e
TRUE := t.r.u.e
IN := i.n
IF := i.f
THEN := t.h.e.n
ELSE := e.l.s.e
ELSEIF := e.l.s.e.i.f
DO := d.o
WHILE := w.h.i.l.e
REPEAT := r.e.p.e.a.t
UNTIL := u.n.t.i.l
FOR := f.o.r
END := e.n.d
RETURN := r.e.t.u.r.n
BREAK := b.r.e.a.k
NAME := *[a-z]
NUMBER := *[0-9]
STRING := ".(*[a-z])."
LOCAL := l.o.c.a.l
}#

${
CHUNK->STAT_AND_SCOLON_REP LASTSTAT_AND_SCOLON_OPT ;
LASTSTAT_AND_SCOLON_OPT->LASTSTAT_AND_SCOLON ;
LASTSTAT_AND_SCOLON_OPT->;
STAT_AND_SCOLON_REP->STAT_AND_SCOLON_REP STAT_AND_SCOLON ;
STAT_AND_SCOLON_REP->;
STAT_AND_SCOLON->STAT SCOLON_OPT ;
SCOLON_OPT->SCOLON ;
SCOLON_OPT->;
LASTSTAT_AND_SCOLON->LASTSTAT SCOLON_OPT ;
BLOCK->CHUNK ;
STAT->VARLIST EQUALS EXPLIST ;
STAT->FUNCTIONCALL ;
STAT->DO BLOCK END ;
STAT->WHILE EXP DO BLOCK END ;
STAT->REPEAT BLOCK UNTIL EXP ;
STAT->IF EXP THEN BLOCK ELSEIF_AND_THEN_REP ELSE_STAT_OPT END ;
ELSE_STAT_OPT->ELSE_STAT ;
ELSE_STAT_OPT->;
ELSE_STAT->ELSE BLOCK ;
ELSEIF_AND_THEN_REP->ELSEIF_AND_THEN_REP ELSEIF_AND_THEN ;
ELSEIF_AND_THEN_REP->;
ELSEIF_AND_THEN->ELSEIF EXP THEN BLOCK ;
STAT->FOR NAME EQUALS EXP COMMA EXP COMMA_AND_EXP_OPT DO BLOCK END ;
COMMA_AND_EXP_OPT->COMMA_AND_EXP ;
COMMA_AND_EXP_OPT->;
COMMA_AND_EXP->COMMA EXP ;
STAT->FOR NAMELIST IN EXPLIST DO BLOCK END ;
STAT->FUNCTION FUNCNAME FUNCBODY ;
STAT->LOCAL FUNCTION NAME FUNCBODY ;
STAT->LOCAL NAMELIST EQUALS_AND_EXPLIST_OPT ;
EQUALS_AND_EXPLIST_OPT->EQUALS_AND_EXPLIST ;
EQUALS_AND_EXPLIST_OPT->;
EQUALS_AND_EXPLIST->EQUALS EXPLIST ;
LASTSTAT->RETURN EXPLIST_OPT ;
EXPLIST_OPT->EXPLIST ;
EXPLIST_OPT->;
LASTSTAT->BREAK ;
FUNCNAME->NAME DOT_AND_NAME_REP COLON_AND_NAME_OPT ;
COLON_AND_NAME_OPT->COLON_AND_NAME ;
COLON_AND_NAME_OPT->;
COLON_AND_NAME->COLON NAME ;
DOT_AND_NAME_REP->DOT_AND_NAME_REP DOT_AND_NAME ;
DOT_AND_NAME_REP->;
DOT_AND_NAME->DOT NAME ;
VARLIST->VAR COMMA_AND_VAR_REP ;
COMMA_AND_VAR_REP->COMMA_AND_VAR_REP COMMA_AND_VAR ;
COMMA_AND_VAR_REP->;
COMMA_AND_VAR->COMMA VAR ;
VAR->NAME ;
VAR->PREFIXEXP LRECTPAREN EXP RRECTPAREN ;
VAR->PREFIXEXP DOT NAME ;
NAMELIST->NAME COMMA_AND_NAME_REP ;
COMMA_AND_NAME_REP->COMMA_AND_NAME_REP COMMA_AND_NAME ;
COMMA_AND_NAME_REP->;
COMMA_AND_NAME->COMMA NAME ;
EXPLIST->EXP_AND_COMMA_REP EXP ;
EXP_AND_COMMA_REP->EXP_AND_COMMA_REP EXP_AND_COMMA ;
EXP_AND_COMMA_REP->;
EXP_AND_COMMA->EXP COMMA ;
EXP->NIL ;
EXP->FALSE ;
EXP->TRUE ;
EXP->NUMBER ;
EXP->STRING ;
EXP->TRIPLEDOTS ;
EXP->FUNCTION ;
EXP->PREFIXEXP ;
EXP->TABLECONSTRUCTOR ;
EXP->EXP BINOP EXP ;
EXP->UNOP EXP ;
PREFIXEXP->VAR ;
PREFIXEXP->FUNCTIONCALL ;
PREFIXEXP->LPAREN EXP RPAREN ;
FUNCTIONCALL->PREFIXEXP ARGS ;
FUNCTIONCALL->PREFIXEXP COLON NAME ARGS ;
ARGS->LPAREN EXPLIST_OPT RPAREN ;
EXPLIST_OPT->EXPLIST ;
EXPLIST_OPT->;
ARGS->TABLECONSTRUCTOR ;
ARGS->STRING ;
FUNCTION->FUNCTION FUNCBODY ;
FUNCBODY->LPAREN PARLIST_OPT RPAREN BLOCK END ;
PARLIST_OPT->PARLIST ;
PARLIST_OPT->;
PARLIST->NAMELIST COMMA_AND_TRIPLEDOTS_OPT ;
COMMA_AND_TRIPLEDOTS_OPT->COMMA_AND_TRIPLEDOTS ;
COMMA_AND_TRIPLEDOTS_OPT->;
COMMA_AND_TRIPLEDOTS->COMMA TRIPLEDOTS ;
PARLIST->TRIPLEDOTS ;
TABLECONSTRUCTOR->LBRACE FIELDLIST_OPT RBRACE ;
FIELDLIST_OPT->FIELDLIST ;
FIELDLIST_OPT->;
FIELDLIST->FIELD FIELDSEP_AND_FIELD_REP FIELDSEP_OPT ;
FIELDSEP_AND_FIELD_REP->FIELDSEP_AND_FIELD_REP FIELDSEP_AND_FIELD ;
FIELDSEP_AND_FIELD_REP->;
FIELDSEP_AND_FIELD->FIELDSEP FIELD ;
FIELDSEP_OPT->FIELDSEP ;
FIELDSEP_OPT->;
FIELD->LRECTPAREN EXP RRECTPAREN EQUALS EXP ;
FIELD->NAME EQUALS EXP ;
FIELD->EXP ;
FIELDSEP->COMMA ;
FIELDSEP->SCOLON ;
BINOP->PLUS ;
BINOP->MINUS ;
BINOP->MULT ;
BINOP->DIV ;
BINOP->POW ;
BINOP->MODULUS ;
BINOP->DOUBLEDOTS ;
BINOP->LESSTHAN ;
BINOP->LESSTHANOREQUALTO ;
BINOP->GREATERTHAN ;
BINOP->GREATERTHANOREQUALTO ;
BINOP->DOUBLEEQUALS ;
BINOP->NOTEQUALS ;
BINOP->AND ;
BINOP->OR ;
UNOP->MINUS ;
UNOP->NOT ;
UNOP->BANG ;
}$