// Grammar for Python

#{
AT_THE_RATE := @
LPAREN := #(
RPAREN := #)
}#

SINGLE_INPUT->NEWLINE ;
SINGLE_INPUT->SIMPLE_STMT ;
SINGLE_INPUT->COMPOUND_STMT NEWLINE ;
FILE_INPUT->NEWLINE_OR_STMT_REP ENDMARKER ;
NEWLINE_OR_STMT_REP->NEWLINE_OR_STMT_REP NEWLINE_OR_STMT ;
NEWLINE_OR_STMT_REP->;
NEWLINE_OR_STMT->NEWLINE ;
NEWLINE_OR_STMT->STMT ;
EVAL_INPUT-> TESTLIST NEWLINE_REP ENDMARKER ;
NEWLINE_REP->NEWLINE_REP NEWLINE ;
NEWLINE_REP->;

DECORATOR-> AT_THE_RATE DOTTED_NAME [ LPAREN [ARGLIST] RPAREN ] NEWLINE ;
DECORATORS-> DECORATOR+ ;
decorated-> DECORATORS (CLASSDEF | FUNCDEF | ASYNC_FUNCDEF) ;

ASYNC_FUNCDEF-> 'async' FUNCDEF ;
FUNCDEF-> 'def' NAME PARAMETERS ['->' TEST] ':' SUITE ;

PARAMETERS-> '(' [TYPEDARGSLIST] ')' ;
TYPEDARGSLIST-> (TFPDEF ['=' TEST] (',' TFPDEF ['=' TEST])* [',' [
        '*' [TFPDEF] (',' TFPDEF ['=' TEST])* [',' ['**' TFPDEF [',']]]
      | '**' TFPDEF [',']]]
  | '*' [TFPDEF] (',' TFPDEF ['=' TEST])* [',' ['**' TFPDEF [',']]]
  | '**' TFPDEF [',']) ;
TFPDEF-> NAME [':' TEST] ;
VARARGSLIST-> (VFPDEF ['=' TEST] (',' VFPDEF ['=' TEST])* [',' [
        '*' [VFPDEF] (',' VFPDEF ['=' TEST])* [',' ['**' VFPDEF [',']]]
      | '**' VFPDEF [',']]]
  | '*' [VFPDEF] (',' VFPDEF ['=' TEST])* [',' ['**' VFPDEF [',']]]
  | '**' VFPDEF [',']
) ;
VFPDEF-> NAME ;

STMT-> SIMPLE_STMT | COMPOUND_STMT ;
SIMPLE_STMT-> SMALL_STMT (';' SMALL_STMT)* [';'] NEWLINE ;
SMALL_STMT-> (EXPR_STMT | DEL_STMT | PASS_STMT | FLOW_STMT |
             IMPORT_STMT | GLOBAL_STMT | NONLOCAL_STMT | ASSERT_STMT) ;
EXPR_STMT-> TESTLIST_STAR_EXPR (ANNASSIGN | AUGASSIGN (YIELD_EXPR|TESTLIST) |
                     ('=' (YIELD_EXPR|TESTLIST_STAR_EXPR))*) ;
ANNASSIGN-> ':' TEST ['=' TEST] ;
TESTLIST_STAR_EXPR-> (TEST|STAR_EXPR) (',' (TEST|STAR_EXPR))* [','] ;
AUGASSIGN-> ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=') ;
# For normal and annotated assignments, additional restrictions enforced by the interpreter
DEL_STMT-> 'del' EXPRLIST ;
PASS_STMT-> 'pass' ;
FLOW_STMT-> BREAK_STMT | CONTINUE_STMT | RETURN_STMT | RAISE_STMT | YIELD_STMT ;
BREAK_STMT-> 'break' ;
CONTINUE_STMT-> 'continue' ;
RETURN_STMT-> 'return' [TESTLIST] ;
YIELD_STMT-> YIELD_EXPR ;
RAISE_STMT-> 'raise' [TEST ['from' TEST]] ;
IMPORT_STMT-> IMPORT_NAME | IMPORT_FROM ;
IMPORT_NAME-> 'import' DOTTED_AS_NAMES ;
# note below-> the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
IMPORT_FROM-> ('from' (('.' | '...')* DOTTED_NAME | ('.' | '...')+)
              'import' ('*' | '(' IMPORT_AS_NAMES ')' | import_as_names)) ;
IMPORT_AS_NAME-> NAME ['as' NAME] ;
DOTTED_AS_NAME-> DOTTED_NAME ['as' NAME] ;
IMPORT_AS_NAMES-> IMPORT_AS_NAME (',' IMPORT_AS_NAME)* [','] ;
DOTTED_AS_NAMES-> DOTTED_AS_NAME (',' DOTTED_AS_NAME)* ;
DOTTED_NAME-> NAME ('.' NAME)* ;
GLOBAL_STMT-> 'global' NAME (',' NAME)* ;
NONLOCAL_STMT-> 'nonlocal' NAME (',' NAME)* ;
ASSERT_STMT-> 'assert' TEST [',' TEST] ;

COMPOUND_STMT-> IF_STMT | WHILE_STMT | FOR_STMT | TRY_STMT | WITH_STMT | FUNCDEF | CLASSDEF | decorated | ASYNC_STMT ;
ASYNC_STMT-> 'async' (FUNCDEF | WITH_STMT | FOR_STMT) ;
IF_STMT-> 'if' TEST ':' SUITE ('elif' TEST ':' SUITE)* ['else' ':' SUITE] ;
WHILE_STMT-> 'while' TEST ':' SUITE ['else' ':' SUITE] ;
FOR_STMT-> 'for' EXPRLIST 'in' TESTLIST ':' SUITE ['else' ':' SUITE] ;
TRY_STMT-> ('try' ':' SUITE
           ((EXCEPT_CLAUSE ':' SUITE)+
            ['else' ':' SUITE]
            ['finally' ':' SUITE] |
           'finally' ':' SUITE)) ;
WITH_STMT-> 'with' WITH_ITEM (',' WITH_ITEM)*  ':' SUITE ;
WITH_ITEM-> TEST ['as' EXPR] ;
# NB compile.c makes sure that the default except clause is last
EXCEPT_CLAUSE-> 'except' [TEST ['as' NAME]] ;
SUITE-> SIMPLE_STMT | NEWLINE INDENT STMT+ DEDENT ;

TEST-> OR_TEST ['if' OR_TEST 'else' TEST] | LAMBDEF ;
TEST_NOCOND-> OR_TEST | LAMBDEF_NOCOND ;
LAMBDEF-> 'lambda' [VARARGSLIST] ':' TEST ;
LAMBDEF_NOCOND-> 'lambda' [VARARGSLIST] ':' TEST_NOCOND ;
OR_TEST-> AND_TEST ('or' AND_TEST)* ;
AND_TEST-> NOT_TEST ('and' NOT_TEST)* ;
NOT_TEST-> 'not' NOT_TEST | COMPARISON ;
COMPARISON-> EXPR (COMP_OP EXPR)* ;
# <> isn't actually a valid COMPARISON operator in Python. It's here for the
# sake of a __future__ import described in PEP 401 (which really works :-)
COMP_OP-> '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not' ;
STAR_EXPR-> '*' EXPR ;
EXPR-> XOR_EXPR ('|' XOR_EXPR)* ;
XOR_EXPR-> AND_EXPR ('^' AND_EXPR)* ;
AND_EXPR-> SHIFT_EXPR ('&' SHIFT_EXPR)* ;
SHIFT_EXPR-> ARITH_EXPR (('<<'|'>>') ARITH_EXPR)* ;
ARITH_EXPR-> TERM (('+'|'-') TERM)* ;
TERM-> FACTOR (('*'|'@'|'/'|'%'|'//') FACTOR)* ;
FACTOR-> ('+'|'-'|'~') FACTOR | POWER ;
POWER-> ATOM_EXPR ['**' FACTOR] ;
ATOM_EXPR-> ['await'] ATOM TRAILER* ;
ATOM-> ('(' [YIELD_EXPR|TESTLIST_COMP] ')' |
       '[' [TESTLIST_COMP] ']' |
       '{' [DICTORSETMAKER] '}' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False') ;
TESTLIST_COMP-> (TEST|STAR_EXPR) ( COMP_FOR | (',' (TEST|STAR_EXPR))* [','] ) ;
TRAILER-> '(' [ARGLIST] ')' | '[' SUBSCRIPTLIST ']' | '.' NAME ;
SUBSCRIPTLIST-> SUBSCRIPT (',' SUBSCRIPT)* [','] ;
SUBSCRIPT-> TEST | [TEST] ':' [TEST] [SLICEOP] ;
SLICEOP-> ':' [TEST] ;
EXPRLIST-> (EXPR|STAR_EXPR) (',' (EXPR|STAR_EXPR))* [','] ;
TESTLIST-> TEST (',' TEST)* [','] ;
DICTORSETMAKER-> ( ((TEST ':' TEST | '**' EXPR)
                   (COMP_FOR | (',' (TEST ':' TEST | '**' EXPR))* [','])) |
                  ((TEST | STAR_EXPR)
                   (COMP_FOR | (',' (TEST | STAR_EXPR))* [','])) ) ;

CLASSDEF-> 'class' NAME ['(' [ARGLIST] ')'] ':' SUITE ;

ARGLIST-> ARGUMENT (',' ARGUMENT)*  [','] ;

ARGUMENT-> ( TEST [COMP_FOR] |
            TEST '=' TEST |
            '**' TEST |
            '*' TEST ) ;

COMP_ITER-> COMP_FOR | COMP_IF ;
SYNC_COMP_FOR-> 'for' EXPRLIST 'in' OR_TEST [COMP_ITER] ;
COMP_FOR-> ['async'] SYNC_COMP_FOR ;
COMP_IF-> 'if' TEST_NOCOND [COMP_ITER] ;

# not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl-> NAME

YIELD_EXPR-> 'yield' [YIELD_ARG] ;
YIELD_ARG-> 'from' TEST | TESTLIST ;